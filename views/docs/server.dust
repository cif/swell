# Server

At its core, Swell's server is a simple [Express](http://expressjs.com/) app which can be extend as needed. For example, if you wanted to install [Passport](http://passportjs.org/) as your authentication service simply install the module and define appropriate routes. Compiled [Responder](/page/server#responders), [Collection](/page/server#collections) and [Model](/page/server#models) objects provide the sugar.

### Pipeline
The modules in `server/` work together to handle the request and response flow:
<div class="flow">
  <h5>server.js</h5>
  <p><b>server/server.js</b> instantiates <a href="http://nodejs.org/api/http.html">HTTP</a>, <a href="https://www.npmjs.org/package/express">express</a> as well as the <a href="http://expressjs.com/4x/api.html#middleware">middleware</a>, and the other components. It also <b>watches for changes to swell.js</b> and reloads them for save n' go development.</p>
</div>

<div class="flow">
  <h5>middleware.js</h5>
  <p><b>server/middlware.js</b> sets up static asset routes, sessions and cookies as well as static JSON. It is first in line, so any <b>custom route handlers you specify</b> here will take precedence over router.js</p>
</div>

<div class="flow">
  <h5>router.js</h5>
  <p><b>server/router.js</b> instantiates the service (swell.js) responders and handles routes specified by the app configuration as well as <b>URI mapping to responder object.method()</b>.</p>
</div>

<div class="flow">
  <h5>swell.js</h5>
  <p><b>server/swell.js</b> consits of the swell core server objects as well as models, collections and responders. The <b>methods it contains are called by the router</b> which in turn passes the response callback to render.js</p>
</div>

<div class="flow">
  <h5>render.js</h5>
  <p><b>server/render.js</b> instantiates  the <a href="https://github.com/krakenjs/adaro">dust view engine</a>, pre-processing options, and sends the appropriate final headers and <b>HTML/JSON/XML output</b> to the client as specified by swell.js object methods.</p>
</div>

<div class="flow">
  <h5>socket.js</h5>
  <p><b>server/socket.js</b> handles emit object broadcasts returned to render.js out() method and sends the packets to appropriately subscribed clients.</p>
</div>

### Middleware / Overrides

Middleware is the first stop on the request pipeline. Any route matching functions implemented in `server/middelware.js` will take priority over the default application routes. This is handy if you want to make use of **regular expression** route matching, or require more control over response handling for certain routes. 

Here's a simple example handling a request via regex matched route in middleware.js (taken from [the expressjs docs](http://expressjs.com/4x/api.html#middleware))

    app.get(/^\/commits\/(\w+)(?:\.\.(\w+))?$/, function(req, res){
        var from = req.params[0];
        var to = req.params[1] || 'HEAD';
        res.send('commit range ' + from + '..' + to);
    });


### Routes / Mapping

By default **routes are maped from the request URIs**. For example, a GET request to /examples/ would call `Examples.get(req, callback)` and a request to /examples/by_price/ would map to `Examples.by_price(req, callback)`.  Additional URI parts are split on / and passed as an array: `req.uri_params`

The `swell.json` configuration file allows you to override the default behavior routes to your responder object methods using your configuration file and specify arguments passed as `req.params`. Example:


    "/examples/edit/:id" : "Examples.edit",
    "/examples/some_seo_keyword/:name" : "Examples.view_by_name"

 


### Responders

Responder methods take two arguments, `req` and `callback`. `req` is the same express req argument you would get specifiying an express route. Router.js will **automatically parse additional query string and multipart / form-data** which is stored in `req.data`. 

The second argument is a callback: `callback(err, data)` which is passed back to the router then on to to `server/render.js` (and `server/socket.js` if data.emit is specified for final output.  

The standard callback pattern `(err, result)` often makes it possible and (faster!) to **pass the callback argument to directly to the functions that fetch data** or perform operations.

*An excerpt from a responder "Examples" (in coffeescript):*

    class Examples extends swell.Responder
      
      # require nodejs modules like this
      async = require 'async'
      
      # specify a default collection to work with
      collection: collections.Examples
      
      # exposes the core get, post, put, delete methods
      expose_rest: true
      
      # for use of uri_params, no route required
      color: (req, callback) =>
        @collection.query color: req.uri_params[0], callback 
          
      # params.id is present because the route is specified in config    
      edit: (req, callback) =>  
        @collection.get req.params.id, (err, example) =>
          return callback(err) if err
          res =
            example: example
            view: 'examples/edit'
          callback null, res  
      
      # query for shapes
      shapes: (req, callback) =>
        @collection.query is_shape: '1', callback   
      
      
      ...    

In this example, a GET request to */examples/color/red* would return a JSON array of examples matching color:'red'. Additional methods defined will map automatically to your URI patterns.  

Responder classes are compiled into **server/swell.js**. When watching, changes will be reflected in each request made to the server. 

### Collections

Collection objects are the primary objects your responders will interact with. swell.Collection (server) methods are similar to Backbone.js on the client, the core of them being `fetch`, `where`, `get`, `add`, `update`, and `remove`.  Additionaly, Collection objects have a few shortcut properties for faster list loading, simple sorting and more.

*An simple collection "Examples" (in coffeescript):*

    class Examples extends swell.Collection
  
      model: models.Example
      url: '/examples/'
      resource: 'mongo'
      store: 'examples'
      synchroize: true
      sort_by: 'sort_order'
      list: ['_id','name']
     

It's common these days for applications to use many data sources. For that reason Collections **each subscribe to their own data source**. Keep in mind that *your implementations* of any swell.Collection will be  **shared by the client**, so be careful not to override the core client side methods and properties found in [Backbone.Collection](http://backbonejs.org/#Collection)


### Models

A Swell model object is **a set of rules, or a filter** which objects will pass through before they are persisted. Swell core's `sanitize(obj)` employs the rules to keep your data clean. You can define `validate()` for further validation as needed. Your implementations of model are **shared by the client**, so be careful not to override [Backbone.Model](http://backbonejs.org/#Model) core functionality.

*A simple "Example" model (written in coffeescript):*

    class Example extends swell.Model
      
      idAttribute: '_id'
      strict: true
      
      fields:
        name:
          type: 'string'
          not_empty: true
          not: 'bad string'
          message: 'Name cannot be "bad string"'
    
        color:
          type: 'string'
          expr: /^#([0-9a-f]{3}|[0-9a-f]{6})$/
          message: 'Colors must be hex values'
    


### REST

swell.Responder defines `get`,`post`,`put`, and `delete` methods which may be called when the `expose_rest` property is set to true. For security reasons, it is set to false by default. This allows you to create responder objects with three lines of code that will handle server side CRUD operations as per [BackboneJS](http://backbonejs.org) specifications.


### Data

The configuration file **swell.json** (check out [starting out](/page/start) section if you missed it) is where data sources are defined. Two types of databases are supported by the core swell.Collection class currently: **MySQL** and **MongoDB**.  Because **swell.Collection classes are compiled to a client-side js file**, you **don't want to expose your connection strings**.  Instead, specify a key by name, using `engine` to tell Swell which engine to use.  If you want to interface with third party APIs, your **responders are not compiled to the client** so connection data there is generally safe.

*An example of two different data sources defined in swell.json:*

    ...
    "resources": {
      "mongo-example" : {
        "engine" : "mongo",
        "db":"swell",
        "host" : "127.0.0.1",
        "port":"27017"
      },
      "mysql" : {
        "engine" : "mysql",
        "db" : "examples",
        "host" : "127.0.0.1",
        "user" : "swell",
        "password" : "3XAmPl3s"
      }
    },
    ...

These can now be specified as a `resource` property of any swell.Collection instance.

### Views

Unless you are creating a single page application you'll likely run into cases where it makes sense to render HTML markup instead of JSON. **SEO is often the determining factor** in making this decision. In order to render views, you can specify a `view` property in your callback response from any responder method. The default layout is specified in **swell.json** however this can also be overriden by specifying a `layout` property. 

*Here is an example responder method that renders a static page:*

    document: (req, callback) =>
      data =
        view: 'docs/' + req.uri_params[0]
        layout: 'layouts/docs'
        title: 'My Example Document'
        roles: ['admin','customer']
      callback null, data  
        
[Dust](https://github.com/linkedin/dustjs/wiki/Dust-Tutorial) syntax may be used to render any dynamic properies of the response (including configuration variables passed via `config` property). Further, your views may also make use of [markdown](http://daringfireball.net/projects/markdown/) syntax. Files contained in your **layouts folder is exempt** from this preprocessing step as unwanted markup can be generated due to line breaks. If desired, you may turn this functionality off in **swell.json** like so:

    $ swell -c "server.enable_markdown" "false" 
        

