# Client


### Overview

True to the promise of flexibility, client side development in Swell is not limited to many constructs or constraints. The only convention is a reliance on [BackboneJS](http://backbonejs.org) which, like Swell is not a framework but rather: 

>  "...gives structure to web applications by providing models with key-value binding and custom events, collections with a rich API of enumerable functions, views with declarative event handling, and connects it all to your existing API over a RESTful JSON interface."

### Structure
How you structure your application on the client is entirely up to you and can easily be changed with modifications to your configuration file. Worth noting however, is that `/models` and `/collections` are **simultaneously compiled to facilitate services on the server**, so you'll want to be sure those line up regardless of where you put them.

### Namespacing
With the exception of dependencies, javascript and template objects are **namespaced recursively by folder structure**. By default, the client side javascript application is compiled into `public/app.js`. A list of folders which comprise the **primary namespaces of the application are specified with the configuration file**. The defaults are `client/routers`, available as `routers` in the application, and `client/views` available as `views`.  

Subsequent folder structures are recursively namespaced. For example, if you were to create a subfolder `client/views/examples` containing a file called `editor.coffee`:


    class Editor extends swell.Form
      el: '.editor'
      ....

This object could be instantiated with this code `@example_editor = new views.examples.Editor`. The same is true of any folder you target and namespace using your configuration file.   

**Files are complied in alphabetical order.** You may have to use _ (like `views/_helpers.coffee) in some cases in order to ensure that classes you extend are defined first at compile time. You can use the configuration .json file to "break out" folders if need be.

### Templating

Templates are watched and compiled into a single development target `public/tmpl.js` by default. Swell comes packaged with [Dust](https://github.com/linkedin/dustjs/wiki/Dust-Tutorial) support by default. Templates can be rendered asynchronously within your application views like so:

    class Report view extends Backbone.View
      el:'.graph2'
      render: (context) =>
        dust.render 'reports.chart', context, (err, res) =>
          return console.err if err
          @$el.html res
      ...

### Dependencies

Swell includes a dependency manager that will concatenate vendor files to a single development target `deps.js` (by default). Changes to the `client/vendor` directory are watched and the development file is updated. Swell comes with the following libraries pre-installed, however this can be augmented for additional client slide functionality.

* [Underscore](http://underscorejs.org/)
* [Backbone](http://backbonejs.org)
* [jQuery](http://jquery) (can be replaced with Zepto in some cases) 
* [Dust](https://github.com/linkedin/dustjs/wiki/Dust-Tutorial) (handlebars and others are easy to implement)
* [Moment](http://momentjs.com/) (an indispensible datetime wrapper)
* [Storage](http://www.jstorage.info/) (a local storage wrapper for when cookie values get too long)

Dependencies start at ~280kn, mostly on account of jQuery.

### Client Core

Swell comes packaged with a small library of core client and side classes, namespaced `swell` which assist in easing manipulation of your models and collections as well as making some node.js conventions available instead of conforming to jQuery and BackboneJS methods. You are welcome, of course to use call and use conventions as you see fit. 

For example, the swell.Helpers method allows you to **circumvent the need to specify an error handler** for a simple `$.ajax` call. Instead, the following will work:

    helpers.ajax '/examples/by_weight/', (err, res) =>
      return console.error(err) if err
      console.log 'examples by weight:', res


Or, in the case of calling Backbone's [Model.save(http://backbonejs.org/#Model-save)], you can leverage a more node-like convention with error handing built-in:


    @model.push, (err, res) =>
      if err
        # notify the client an error has occured
        return false
      console.log 'model saved to server on:', moment(model.get('modified')).format('m/d/Y H:i:s')


Currently, Swell has six objects which can be extended on the client: [swell.Collection](/page/collection), [swell.Form](/page/form), [swell.Helpers](/page/helpers) (extended by `views/_helpers.coffee` by default), [swell.List](/page/list), [swell.model](/page/model) and [swell.Router](/page/router). Review each link to the core API documentation for more information on how to use each one.

### Packaging

When it comes time to deploy your application, it should first be packaged and minified via the following command:

    $ swell -p 
    
This will minifiy and concat your javascript, template, and ventor development targets into `public/production.js`. 

For further tips on deployment review the [deploying](/page/deploy) section in documentation.


