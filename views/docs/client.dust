# Client


The only convention on the client is a reliance on [BackboneJS](http://backbonejs.org) which like Swell is not a framework but provides a basic structure and event binding schema. <br>You can to **structure the client side of a Swell app any way you like** but of course, there are **many shortcuts** for you to take advantage of.

### Structure
Directory structures and targets can easily be changed with modifications to your configuration file. Worth noting however is that `/models` and `/collections` are **simultaneously compiled to facilitate services on the server**, so you'll want to be sure those line up regardless of where you put them.

### Namespacing
With the exception of dependencies, javascript and javascript-template objects are **namespaced recursively by folder structure**.  The `folders` property in each client configuration object is an array of `namespace: directory` value pairs. Any sub folders are recursively namespaced. For example, if you were to create a subfolder `client/views/examples` containing a file called `editor.coffee`:


    class Editor extends swell.Form
      el: '.editor'
      ....

This object could be instantiated with this code `@example_editor = new views.examples.Editor`. The same is true of any folder you target and namespace using your configuration file.   

**NOTE: Files are complied in alphabetical order.**  The easy workaround is use _  e.g. `views/_helpers.coffee` to ensure that super objects that defined before object extending them at runtime. 

A cleaner alternative is to use the "break out" folders with the configuration.

*Here's an excerpt from the default [swell.json](https://github.com/cif/swell/blob/master/swell.json):*
      
      ...
      "client": {
        "compiler": "coffee",
        "folders": [
          {
            "swell": "swell/client"
          },
          {
            "models": "models"
          },
          {
            "collections": "collections"
          },
          {
            "routers": "client/routers"
          },
          {
            "views": "client/views"
          }
        ],
        "output": "public/js/app.js",
        "extensions": [
          ".coffee"
        ]
      }, ...

### Templating

Templates are watched and compiled into a single development target `public/tmpl.js` by default. Swell comes packaged with [Dust](https://github.com/linkedin/dustjs/wiki/Dust-Tutorial) support by default. Templates can be rendered asynchronously within your application views like so:

    class ReportView extends Backbone.View
      el:'.graph2'
      render: (context) =>
        dust.render 'reports.chart', context, (err, res) =>
          return console.err if err
          @$el.html res
      ...

Swell has a one liner shortcut for rendering via [swell.Helpers](/page/api.client.helpers) that supports markdown with an optional fourth argument set to `true`. Because dust's rendering function is asychronous, a final callback argument is specified in case you have to wait for the markup to be present

    helpers.render @el, 'reports.help', context, true

##### **Deveopler Note:** As of Swell version 0.2, the dust compiler on osX 10.8 struggles with newlines in tabbed in (code blocks etc.) markdown for the initial startup/compile . Once a file has been saved, the issue seems to resolve itself.

### Dependencies

Swell includes a dependency manager that will concatenate vendor files to a single development target `deps.js` (by default). Changes to the `client/vendor` directory are watched and the development file is updated. **Swell comes with the following libraries pre-installed**:  

* [Underscore](http://underscorejs.org/) **~13k**
* [Backbone](http://backbonejs.org) **~20k**
* [jQuery](http://jquery.com) **~96k**
* [jQueryUI](http://jqueryui.com)  **~90k** (used to support drag and drop)
* [Dust](https://github.com/linkedin/dustjs/wiki/Dust-Tutorial) **~11k** (handlebars and others are easy to implement)
* [Moment](http://momentjs.com/) **~28k** (an indispensible datetime wrapper)
* [Async](https://github.com/caolan/async) **~29k** (helpful utility for avoiding long callback chains)
* [Storage](http://www.jstorage.info/) **~31k** (a local storage wrapper for when cookie values get too long)

The vendor directory can be augmented for additional client slide functionality or pared down for faster load times.

### Client Core

**Enter the shortcuts.**  Swell comes packaged with a small library of core client and side classes, namespaced `swell` which assist in easing manipulation of your models and collections as well as making some node.js conventions available instead of conforming to jQuery and BackboneJS methods. 

For example, the swell.Helpers.ajax method allows you to **circumvent the need to specify an error handler** for a simple `$.ajax` call. Instead, the following will work:

    helpers.ajax '/examples/by_weight/', (err, res) =>
      return console.error(err) if err
      console.log 'examples by weight:', res


Or, in the case of calling Backbone's [Model.save](http://backbonejs.org/#Model-save), you can adopt a more node-like convention with error handing built-in:


    @model.push, (err, res) =>
      if err
        # notify the client an error has occured
        return false
      console.log 'model saved to server on:', moment(model.get('modified')).format('m/d/Y H:i:s')


Currently, Swell has six objects which can be extended on the client: [swell.Collection](/page/api.client.collection), [swell.Form](/page/api.client.form), [swell.Helpers](/page/api.client.helpers) (extended by `views/_helpers.coffee` by default), [swell.List](/page/api.client.list), [swell.model](/page/api.client.model) and [swell.Router](/page/api.client.router). Review each link to the core API documentation for more information on how to use each one.

### Packaging

When it comes time to deploy your application, it should first be packaged and minified via the following command:

    $ swell -p 
    
This will minifiy and concatenate your javascript, template, and vendor development targets into `public/production.js`, or another file that can be specified in your configuration.

For more complex packaging and deployment scenarios, [Grunt](http://gruntjs.com/) is always a good choice.


