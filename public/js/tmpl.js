
(function(){dust.register("examples.home",body_0);function body_0(chk,ctx){return chk.write("<h1 id=\"examples\">Examples</h1>").write("\n\n").write("<p>The examples section aims to demonstrate live examples of each of the core client side classes as well provide sample code.  </p>").write("\n\n").write("<p>Notice how the hashtag changes while browing the example pages.  Essentially, <strong>this section is a one page javascript web-app.</strong> The text you are reading is rendered by simple render via the <code>home</code> route in <code>client/routers/examples.coffee</code>.  </p>").write("\n\n").write("<p>The dust template markdown is contained in <code>client/dust/examples/home.dust</code>. </p>").write("\n\n").write("<p>Ready? Let't get started with <a href=\"#router\">swell.Router</a></p>");}return body_0;})();
(function(){dust.register("examples.list",body_0);function body_0(chk,ctx){return chk.write("<h1 id=\"swelllistexample\">swell.List example</h1>").write("\n\n").write("<p>There aren't too many apps out there these days that don't have lists in one form or another. </p>").write("\n\n").write("<p>Whether it's messages, contacts, orders or examples the <strong>goal of swell.List is to ease common list interactions</strong>. These include, searching, sorting (grids), reordering etc. Naturally, <strong>swell.List broadcast events</strong> when items are interacted with.</p>").write("\n\n").write("<h3 id=\"examples\">Examples</h3>").write("\n\n").write("<p><em>Here's a simple drag and drop list example of our object names and colors:</em></p>").write("\n\n").write("<div class=\"simple\"></div>").write("\n\n").write("<p><br></p>").write("\n\n").write("<p><em>Here's an example of a simple heading-sortable grid:</em></p>").write("\n\n").write("<div class=\"grid\"></div>").write("\n\n").write("<p><br>").write("\n").write("All the interactions in these two exampels are handled by the core swell.List object so the router code in the previous section required is minimal, but extensible. in Swell, nearly everything is <strong>bound with events</strong> as opposed to relying on function callbacks globals.</p>").write("\n\n").write("<p><em>Here's the code that renders both the sortable list and the grid:</em></p>").write("\n\n").write("<pre><code>  ...").write("\n  ").write("list: (search) =&gt;").write("\n    ").write("helpers.render 'section[role=main]','examples.list', @app, =&gt;").write("\n      ").write("helpers.loader '.simple,.grid'").write("\n      ").write("examples.grab (err, models) =&gt;").write("\n        ").write("display = if search then @collection.search(search, 'name') else models").write("\n        ").write("@list.render 'examples.list_simple', examples: display").write("\n        ").write("@grid.render 'examples.list_grid', examples: display").write("\n  ").write("...").write("\n").write("</code></pre>").write("\n\n").write("<h3 id=\"templatingyourlists\">Templating  Your Lists</h3>").write("\n\n").write("<p>Context to your <a href=\"https://github.com/linkedin/dustjs/wiki/Dust-Tutorial\">DustJS</a>. There are a few ways in which</p>");}return body_0;})();
(function(){dust.register("examples.list_grid",body_0);function body_0(chk,ctx){return chk.write("<table class=\"grid\">").write("\n  ").write("<tr>").write("\n    ").write("<th></th> <!-- selection placeholder -->").write("\n    ").section(ctx.get(["columns"], false),ctx,{"block":body_1},null).write("\n  ").write("</tr>").write("\n  ").section(ctx.get(["examples"], false),ctx,{"block":body_2},null).write(" ").write("\n").write("</table>   ");}function body_1(chk,ctx){return chk.write("\n      ").write("<th class=\"").helper("prop",ctx,{},{"key":ctx.getPath(true, []),"obj":ctx.get(["fields"], false),"field":"type"}).write("\">").helper("prop",ctx,{},{"key":ctx.getPath(true, []),"obj":ctx.get(["fields"], false),"field":"label"}).write("</th>").write("\n    ");}function body_2(chk,ctx){return chk.write("\n    ").write("<tr>").write("\n      ").write("<td>").write("\n      ").section(ctx.get(["columns"], false),ctx,{"block":body_3},null).write("\n    ").write("</tr>").write("\n  ");}function body_3(chk,ctx){return chk.write("\n        ").write("<td class=\"").reference(ctx.get(["type"], false),ctx,"h").write("\">").reference(ctx.getPath(false, ["attributes",ctx.getPath(true, [])]),ctx,"h").write("</td>").write("\n      ");}return body_0;})();
(function(){dust.register("examples.list_simple",body_0);function body_0(chk,ctx){return chk.write("<ol class=\"swell-list sortable\">").write("\n  ").section(ctx.get(["examples"], false),ctx,{"else":body_1,"block":body_2},null).write("\n").write("</ol>    ");}function body_1(chk,ctx){return chk.write("\n    ").write("<li class=\"empty\">There aren't any examples!</li>").write("\n  ");}function body_2(chk,ctx){return chk.write("\n    ").write("<li id=\"").reference(ctx.getPath(false, ["attributes","_id"]),ctx,"h").write("\"><span style=\"color:#").reference(ctx.getPath(false, ["attributes","color"]),ctx,"h").write("\">").reference(ctx.getPath(false, ["attributes","name"]),ctx,"h").write("</span></li>").write("\n  ");}return body_0;})();
(function(){dust.register("examples.router",body_0);function body_0(chk,ctx){return chk.write("<h1 id=\"swellrouter\">swell.Router</h1>").write("\n\n").write("<h3 id=\"routing\">Routing</h3>").write("\n\n").write("<p>Routing is the way in which Backbone provides history to the browser by watching for changes in <code>window.location.hash</code>. </p>").write("\n\n").write("<p>For more information check out <a href=\"http://backbonejs.org/#Router\">BackboneJS's Router</a> documentation. The single router servicing this app example is <code>client/routers/examples.coffee</code>.</p>").write("\n\n").write("<p><em>Here's a an exerpt of that code:</em></p>").write("\n\n").write("<pre><code>class Examples extends swell.Router").write("\n\n  ").write("title: 'Swell Client Examples'").write("\n  ").write("collection: new collections.Examples").write("\n  ").write("routes:").write("\n    ").write("'home' : 'home'").write("\n    ").write("'router' : 'router'").write("\n    ").write("'list/search' : 'search'").write("\n    ").write("'list/search/:query' : 'search'").write("\n    ").write("'list' : 'list'").write("\n    ").write("'edit/:id' : 'edit'").write("\n\n  ").write("init: (@app) =&gt;").write("\n    ").write("window.examples = @collection = new collections.Examples").write("\n    ").write("@list = new swell.List el: '.simple', sortable: true").write("\n    ").write("grid = ").write("\n      ").write("el: '.grid', sortable: false").write("\n      ").write("columns: ['name','color','length','created_on']").write("\n      ").write("fields: new models.Example().fields").write("\n    ").write("@grid = new swell.List grid").write("\n\n  ").write("home: =&gt;").write("\n    ").write("# no UI events to bind on the intro ").write("\n    ").write("# so just render the home template ").write("\n    ").write("helpers.render 'section[role=main]', 'examples.home', @app, true").write("\n\n  ").write("...  ").write("\n").write("</code></pre>").write("\n\n").write("<h3 id=\"bindingunbinding\">Binding &amp; Unbinding</h3>").write("\n\n").write("<p><strong>Now is a good time to open your console</strong>. Refresh the page and take note of the info that Swell is logging, partiulary <code>unbinding route:router</code> and <code>binding route:router</code>.  Swell is <strong>automatically undelegating and unbinding all other app routers</strong> and then binding the current in-use router.</p>").write("\n\n").write("<p>Because of this, <code>bind()</code> and <code>unbind()</code> methods on your router are an ideal place to bind your data to your views. The unbinding of your events and listeners saves valuable memory and allows Bakcbone.View events to share common class names e.g. <br><code>'click .save' : 'save'</code> without misfiring events. </p>").write("\n\n").write("<p><em>Here's how we are binding our examples app data and views together:</em></p>").write("\n\n").write("<pre><code>  ...").write("\n  ").write("bind: =&gt;").write("\n\n    ").write("# bind the our list sorting").write("\n    ").write("@list.on 'sorted', @collection.sorted").write("\n\n    ").write("# when the collection gets updates re-render the simple list").write("\n    ").write("# but, call update() on the grid in case it is user sorted").write("\n    ").write("examples.on 'updated', (res) =&gt;").write("\n      ").write("@list.render 'examples.list_simple', examples: examples.models").write("\n      ").write("@grid.update").write("\n\n\n  ").write("unbind: =&gt;").write("\n    ").write("@list.off 'sorted'").write("\n    ").write("examples.off 'updated'").write("\n  ").write("...").write("\n").write("</code></pre>").write("\n\n").write("<p>Lastly, in order for that magic to happen we need to <strong>initialize our router in the main application object</strong>. </p>").write("\n\n").write("<p><em>Here's an example main Application object:</em></p>").write("\n\n").write("<pre><code>class Application extends Backbone.Router").write("\n\n  ").write("initialize: -&gt; ").write("\n\n    ").write("# initialize core helpers and synchro").write("\n    ").write("window.helpers = @helpers = new views.Helpers").write("\n    ").write("window.synchro = @synchro = new swell.Synchro 'example-app'").write("\n\n    ").write("# initialize application routers").write("\n    ").write("@examples = new routers.Examples @").write("\n\n    ").write("# start the party").write("\n    ").write("Backbone.history.start()").write("\n\n    ").write("# return the app instance").write("\n    ").write("console.info '[swell] ' + moment().format('HH:mm:ss') + ' app instantiated as window.app '").write("\n    ").write("return @").write("\n\n  ").write("...").write("\n").write("</code></pre>").write("\n\n").write("<p>Constructing your routers <strong>using @ (this) as the first argument</strong> tells the router to register itself with the app. Any additional arguments you pass can be recieved by your implementaitons <code>init()</code> method.</p>").write("\n\n").write("<p>Got all that? Let's check out <a href=\"#list\">swell.List</a></p>");}return body_0;})();
(function(){dust.register("reports.chart",body_0);function body_0(chk,ctx){return chk.write("<div class=\"chart\">").write("\n").write("<h2>").reference(ctx.get(["name"], false),ctx,"h").write("</h2>").write("\n").write("<canvas id=\"chart\" width=\"1000\" height=\"500\"></canvas>").write("\n").write("</div>");}return body_0;})();
