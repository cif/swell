var dom = {}
dom.examples = {};
dom.examples.example = (function anonymous(data_0) {
  var data = data_0;
  var el0 = document.createElement("p");
  var el1 = document.createElement("a");
  el1.href = data_0["example"];
  el1.textContent = data_0["bar"];
  el0.appendChild(el1);
  return el0;
});
dom.examples.list = (function() {
  var frag;
function anonymous(data_0) {
    var frag = document.createDocumentFragment();
    var data = data_0;
    var el0 = document.createElement("h1");
    el0.id = "swelllistexamples";
    el0.textContent = "swell.List examples";
    frag.appendChild(el0);
    var el2 = document.createElement("p");
    var el3 = document.createTextNode("There aren't too many apps out there these days that don't have lists in one form or another. The core list object faciliates simple ");
    el2.appendChild(el3);
    var el4 = document.createElement("strong");
    el4.textContent = "click handling, drag 'n' drop reordering and sortable grid headings";
    el2.appendChild(el4);
    var el5 = document.createTextNode(".");
    el2.appendChild(el5);
    frag.appendChild(el2);
    var el7 = document.createElement("p");
    var el8 = document.createTextNode("There are several default ");
    el7.appendChild(el8);
    var el9 = document.createElement("a");
    el9.href = "/page/api.client.list#events";
    el9.textContent = "events";
    el7.appendChild(el9);
    var el10 = document.createTextNode(" which ");
    el7.appendChild(el10);
    var el11 = document.createElement("a");
    el11.href = "/page/api.client.list";
    el11.textContent = "swell.List";
    el7.appendChild(el11);
    var el12 = document.createTextNode(" will broadcast when lists are interacted with.");
    el7.appendChild(el12);
    frag.appendChild(el7);
    var el14 = document.createElement("h3");
    el14.id = "examples";
    el14.textContent = "Examples";
    frag.appendChild(el14);
    var el16 = document.createElement("p");
    var el17 = document.createElement("em");
    el17.textContent = "Here's a simple drag and drop list example of our object names and colors:";
    el16.appendChild(el17);
    frag.appendChild(el16);
    var el19 = document.createElement("div");
    el19.className = "simple";
    frag.appendChild(el19);
    var el21 = document.createElement("p");
    var el22 = document.createElement("br");
    el21.appendChild(el22);
    frag.appendChild(el21);
    var el24 = document.createElement("p");
    var el25 = document.createElement("em");
    el25.textContent = "Here's an example of a simple heading-sortable grid:";
    el24.appendChild(el25);
    frag.appendChild(el24);
    var el27 = document.createElement("div");
    el27.className = "grid";
    frag.appendChild(el27);
    var el29 = document.createElement("p");
    var el30 = document.createElement("br");
    el29.appendChild(el30);
    var el31 = document.createTextNode("\nThe interactions in these two exampels are handled by the core ");
    el29.appendChild(el31);
    var el32 = document.createElement("a");
    el32.href = "/page/api.client.list";
    el32.textContent = "swell.List";
    el29.appendChild(el32);
    var el33 = document.createTextNode(" object so the router code in the previous section required is minimal but extensible. In Swell, nearly everything is ");
    el29.appendChild(el33);
    var el34 = document.createElement("strong");
    el34.textContent = "bound with events";
    el29.appendChild(el34);
    var el35 = document.createTextNode(" as opposed to relying on function callbacks.");
    el29.appendChild(el35);
    frag.appendChild(el29);
    var el37 = document.createElement("p");
    var el38 = document.createElement("em");
    el38.textContent = "Here's the code that renders both the sortable list and the grid:";
    el37.appendChild(el38);
    frag.appendChild(el37);
    var el40 = document.createElement("pre");
    var el41 = document.createElement("code");
    el41.textContent = "  ...\n  list: =>\n\n    helpers.render 'section[role=main]',dom.examples.list, "+"{"+"}"+", @app\n\n    # we have to delegate here, because DOM nodes\n    # aren't rendered initially in our example\n    @delegate()\n\n    helpers.loader '.simple,.grid'\n    examples.grab (err, models) =>\n      @list.render dom.examples.list_simple, examples: models\n      @grid.render dom.examples.list_grid, examples: models\n\n      # highlights code examples\n      $('pre code').each (i, block) -> hljs.highlightBlock(block)\n  ...\n";
    el40.appendChild(el41);
    frag.appendChild(el40);
    var el43 = document.createElement("h3");
    el43.id = "templatinglists";
    el43.textContent = "Templating Lists";
    frag.appendChild(el43);
    var el45 = document.createElement("p");
    var el46 = document.createTextNode("These lists in the examples are rendered by passing a context and handle holder object to a precompiled ");
    el45.appendChild(el46);
    var el47 = document.createElement("a");
    el47.href = "https://github.com/lazd/DOMly";
    el47.textContent = "Domly";
    el45.appendChild(el47);
    var el48 = document.createTextNode(" template. In our simple first case, that template is ");
    el45.appendChild(el48);
    var el49 = document.createElement("code");
    el49.textContent = "client/dust/examples/list_simple.dom";
    el45.appendChild(el49);
    frag.appendChild(el45);
    var el51 = document.createElement("p");
    el51.textContent = "Here's the code that makes up our simple example with absolutely no frills:";
    frag.appendChild(el51);
    var el53 = document.createElement("pre");
    var el54 = document.createElement("code");
    el54.textContent = "\n <ol class=\"swell-list sortable\">\n    <if data.examples>\n      <foreach data.examples>\n        <li handle=\""+"{"+"{"+"data.attributes._id"+"}"+"}"+"\" id=\""+"{"+"{"+"data.attributes._id"+"}"+"}"+"\"><span style=\"color:#"+"{"+"{"+"data.attributes.color"+"}"+"}"+"\">"+"{"+"{"+"data.attributes.name"+"}"+"}"+"</span></li>\n      </foreach>  \n    <else>\n      <li class=\"empty\">There aren't any examples!</li>\n    </if>\n  </ol>  \n";
    el53.appendChild(el54);
    frag.appendChild(el53);
    var el56 = document.createElement("p");
    var el57 = document.createTextNode("Here's the dust that makes our grid. Note the use of a few custom helpers defined in ");
    el56.appendChild(el57);
    var el58 = document.createElement("a");
    el58.href = "/page/api.client.helpers";
    el58.textContent = "swell.Helpers";
    el56.appendChild(el58);
    var el59 = document.createTextNode(" :");
    el56.appendChild(el59);
    frag.appendChild(el56);
    var el61 = document.createElement("pre");
    var el62 = document.createElement("code");
    el62.textContent = "\n asdfsadf\n";
    el61.appendChild(el62);
    frag.appendChild(el61);
    return frag;
}
  return function template() {
    if (!frag) {
      frag = anonymous();
    }
    return frag.cloneNode(true);
  };
}());
dom.examples.home = (function() {
  var frag;
function anonymous(data_0) {
    var frag = document.createDocumentFragment();
    var data = data_0;
    var el0 = document.createElement("h1");
    el0.id = "examples";
    el0.textContent = "Examples";
    frag.appendChild(el0);
    var el2 = document.createElement("p");
    el2.textContent = "This is a simple, one-collection, single page app that demonstrates some built-in client functionality along with code examples.  ";
    frag.appendChild(el2);
    var el4 = document.createElement("p");
    var el5 = document.createTextNode("This text is rendered by a method defined and called via the ");
    el4.appendChild(el5);
    var el6 = document.createElement("code");
    el6.textContent = "home";
    el4.appendChild(el6);
    var el7 = document.createTextNode(" (#home) in ");
    el4.appendChild(el7);
    var el8 = document.createElement("code");
    el8.textContent = "client/routers/examples.coffee";
    el4.appendChild(el8);
    var el9 = document.createTextNode(". ");
    el4.appendChild(el9);
    frag.appendChild(el4);
    var el11 = document.createElement("p");
    el11.textContent = "Notice how the hashtag changes while browing these pages. ";
    frag.appendChild(el11);
    var el13 = document.createElement("p");
    var el14 = document.createTextNode("The ");
    el13.appendChild(el14);
    var el15 = document.createElement("a");
    el15.href = "https://github.com/lazd/DOMly";
    el15.textContent = "domly";
    el13.appendChild(el15);
    var el16 = document.createTextNode(" template markdown is contained in ");
    el13.appendChild(el16);
    var el17 = document.createElement("code");
    el17.textContent = "client/dust/examples/home.dom";
    el13.appendChild(el17);
    var el18 = document.createTextNode(". ");
    el13.appendChild(el18);
    frag.appendChild(el13);
    var el20 = document.createElement("p");
    var el21 = document.createTextNode("Ready? Let's get started with ");
    el20.appendChild(el21);
    var el22 = document.createElement("a");
    el22.href = "#router";
    el22.textContent = "swell.Router";
    el20.appendChild(el22);
    frag.appendChild(el20);
    return frag;
}
  return function template() {
    if (!frag) {
      frag = anonymous();
    }
    return frag.cloneNode(true);
  };
}());
dom.examples.list_simple = (function anonymous(data_0) {
  var data = data_0;
  var el0 = document.createElement("ol");
  el0.className = "swell-list sortable";
  if (data_0["examples"]) {
    var iterated_1 = data_0["examples"];
    for (var i1 = 0, ni1 = iterated_1.length; i1 < ni1; i1++) {
      var data_1 = data = iterated_1[i1];
      var el6 = this[data_1["attributes"]["_id"]] = document.createElement("li");
      el6.id = data_1["attributes"]["_id"];
      var el7 = document.createElement("span");
      el7.setAttribute("style", "color:#"+data_1["attributes"]["color"]);
      el7.textContent = data_1["attributes"]["name"];
      el6.appendChild(el7);
      el0.appendChild(el6);
    }
  }
  else {
    var el11 = document.createElement("li");
    el11.className = "empty";
    el11.textContent = "There aren't any examples!";
    el0.appendChild(el11);
  }
  return el0;
});
dom.examples.router = (function() {
  var frag;
function anonymous(data_0) {
    var frag = document.createDocumentFragment();
    var data = data_0;
    var el0 = document.createElement("h1");
    el0.id = "swellrouter";
    el0.textContent = "swell.Router";
    frag.appendChild(el0);
    var el2 = document.createElement("p");
    var el3 = document.createTextNode("Routing is the way in which Backbone provides history to the browser by watching for changes in ");
    el2.appendChild(el3);
    var el4 = document.createElement("code");
    el4.textContent = "window.location.hash";
    el2.appendChild(el4);
    var el5 = document.createTextNode(". ");
    el2.appendChild(el5);
    frag.appendChild(el2);
    var el7 = document.createElement("p");
    var el8 = document.createTextNode("For more information check out ");
    el7.appendChild(el8);
    var el9 = document.createElement("a");
    el9.href = "http://backbonejs.org/#Router";
    el9.textContent = "BackboneJS's Router";
    el7.appendChild(el9);
    var el10 = document.createTextNode(" documentation. The single router servicing this app example is ");
    el7.appendChild(el10);
    var el11 = document.createElement("code");
    el11.textContent = "client/routers/examples.coffee";
    el7.appendChild(el11);
    var el12 = document.createTextNode(".");
    el7.appendChild(el12);
    frag.appendChild(el7);
    var el14 = document.createElement("p");
    var el15 = document.createElement("em");
    el15.textContent = "Here's a an exerpt of that code:";
    el14.appendChild(el15);
    frag.appendChild(el14);
    var el17 = document.createElement("pre");
    var el18 = document.createElement("code");
    el18.textContent = "class Examples extends swell.Router\n\n  # optional title gets displayed in address bar on routing\n  title: 'Swell Client Examples'  \n  routes:\n    'home' : 'home'\n    'router' : 'router'\n    'list/search' : 'search'\n    'list/search/:query' : 'search'\n    'list' : 'list'\n    'edit/:id' : 'edit'\n\n  init: (@app) =>\n    # scoping the collection directly to the window is optional, but handy \n    window.examples = @collection = new collections.Examples\n    @list = new swell.List el: '.simple', sortable: true\n    grid = \n      el: '.grid', sortable: false\n      columns: ['name','color','length','created_on']\n      fields: new models.Example().fields\n    @grid = new swell.List grid\n\n  home: =>\n    # no UI events to bind on the intro \n    # so just render the home template \n    helpers.render 'section[role=main]', dom.examples.home, &lcub;&rcub;, @app\n\n  ...  \n";
    el17.appendChild(el18);
    frag.appendChild(el17);
    var el20 = document.createElement("h3");
    el20.id = "bindingunbinding";
    el20.textContent = "Binding & Unbinding";
    frag.appendChild(el20);
    var el22 = document.createElement("p");
    var el23 = document.createElement("strong");
    el23.textContent = "Now is a good time to open your console";
    el22.appendChild(el23);
    var el24 = document.createTextNode(". Refresh the page and take note of the info that Swell is logging, partiulary ");
    el22.appendChild(el24);
    var el25 = document.createElement("code");
    el25.textContent = "unbinding route:router";
    el22.appendChild(el25);
    var el26 = document.createTextNode(" and ");
    el22.appendChild(el26);
    var el27 = document.createElement("code");
    el27.textContent = "binding route:router";
    el22.appendChild(el27);
    var el28 = document.createTextNode(".  Swell is ");
    el22.appendChild(el28);
    var el29 = document.createElement("strong");
    el29.textContent = "automatically undelegating and unbinding all other app routers";
    el22.appendChild(el29);
    var el30 = document.createTextNode(" and then binding the current in-use router. The automatic unbinding of your events and listeners saves valuable memory and allows Bakcbone.View events to share common class names e.g. ");
    el22.appendChild(el30);
    var el31 = document.createElement("br");
    el22.appendChild(el31);
    var el32 = document.createElement("code");
    el32.textContent = "'click .save' : 'save'";
    el22.appendChild(el32);
    var el33 = document.createTextNode(" without misfiring events.");
    el22.appendChild(el33);
    frag.appendChild(el22);
    var el35 = document.createElement("p");
    var el36 = document.createTextNode("The ");
    el35.appendChild(el36);
    var el37 = document.createElement("code");
    el37.textContent = "bind()";
    el35.appendChild(el37);
    var el38 = document.createTextNode(" and ");
    el35.appendChild(el38);
    var el39 = document.createElement("code");
    el39.textContent = "unbind()";
    el35.appendChild(el39);
    var el40 = document.createTextNode(" methods are also a convenient place to bind data events to your views: ");
    el35.appendChild(el40);
    frag.appendChild(el35);
    var el42 = document.createElement("p");
    var el43 = document.createElement("em");
    el43.textContent = "Here's how we are binding our examples app data and views together:";
    el42.appendChild(el43);
    frag.appendChild(el42);
    var el45 = document.createElement("pre");
    var el46 = document.createElement("code");
    el46.textContent = "  ...\n  bind: =>\n\n    # bind the our list sorting\n    @list.on 'sorted', @collection.sorted\n\n    # when the collection gets updates re-render the simple list\n    # but, call update() on the grid in case it is user sorted\n    examples.on 'change', @list.update\n    examples.on 'add', @list.add\n    examples.on 'sort', (collection) =>\n      @list.render dom.examples.list_simple, examples: examples.models\n\n\n  unbind: =>\n    @list.off 'sorted'\n    examples.off 'change add sort'\n  ...\n";
    el45.appendChild(el46);
    frag.appendChild(el45);
    var el48 = document.createElement("p");
    var el49 = document.createTextNode("In order for that magic to happen we need to ");
    el48.appendChild(el49);
    var el50 = document.createElement("strong");
    el50.textContent = "initialize our router in the main application object";
    el48.appendChild(el50);
    var el51 = document.createTextNode(". ");
    el48.appendChild(el51);
    frag.appendChild(el48);
    var el53 = document.createElement("p");
    var el54 = document.createElement("em");
    el54.textContent = "Here's an example main Application object:";
    el53.appendChild(el54);
    frag.appendChild(el53);
    var el56 = document.createElement("pre");
    var el57 = document.createElement("code");
    el57.textContent = "class Application extends Backbone.Router\n\n  initialize: -> \n\n    # initialize core helpers and synchro\n    window.helpers = @helpers = new views.Helpers\n    window.synchro = @synchro = new swell.Synchro 'example-app'\n\n    # initialize application routers\n    @examples = new routers.Examples @\n\n    # start the party\n    Backbone.history.start()\n\n    # return the app instance\n    console.info '[swell] ' + moment().format('HH:mm:ss') + ' app instantiated as window.app '\n    return @\n\n  ...\n";
    el56.appendChild(el57);
    frag.appendChild(el56);
    var el59 = document.createElement("p");
    var el60 = document.createTextNode("Constructing your routers ");
    el59.appendChild(el60);
    var el61 = document.createElement("strong");
    el61.textContent = "using @ (this) as the first argument";
    el59.appendChild(el61);
    var el62 = document.createTextNode(" tells the router to register itself with the app. Any additional arguments you pass can be recieved by your implementations' ");
    el59.appendChild(el62);
    var el63 = document.createElement("code");
    el63.textContent = "init()";
    el59.appendChild(el63);
    var el64 = document.createTextNode(" method.");
    el59.appendChild(el64);
    frag.appendChild(el59);
    var el66 = document.createElement("p");
    var el67 = document.createTextNode("Got all that? Let's check out ");
    el66.appendChild(el67);
    var el68 = document.createElement("a");
    el68.href = "#list";
    el68.textContent = "swell.List";
    el66.appendChild(el68);
    frag.appendChild(el66);
    return frag;
}
  return function template() {
    if (!frag) {
      frag = anonymous();
    }
    return frag.cloneNode(true);
  };
}());
