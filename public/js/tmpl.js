
(function(){dust.register("examples.home",body_0);function body_0(chk,ctx){return chk.write("<h1 id=\"examples\">Examples</h1><p>This section is in itself, a very simple single page app. It demonstrates examples of each of the core client-side objects and code snippets.  </p><p>Notice how the hashtag changes while browing the example pages.  Essentially, <strong>this section is a one page javascript web-app.</strong> The text you are reading is rendered by simple render via the <code>home</code> route in <code>client/routers/examples.coffee</code>.  </p><p>The dust template markdown is contained in <code>client/dust/examples/home.dust</code>. </p><p>Ready? Let't get started with <a href=\"#router\">swell.Router</a></p>");}return body_0;})();
(function(){dust.register("examples.list",body_0);function body_0(chk,ctx){return chk.write("<h1 id=\"swelllistexamples\">swell.List examples</h1><p>There aren't too many apps out there these days that don't have lists in one form or another. The core list object faciliates common list interactions such as <strong>searching, sorting (grids), reordering</strong> and more. <a href=\"/page/api.client.list\">swell.List</a> broadcasts <a href=\"/page/api.client.list#events\">events</a> when items are interacted with.</p><h3 id=\"examples\">Examples</h3><p><em>Here's a simple drag and drop list example of our object names and colors:</em></p><div class=\"simple\"></div><p><br></p><p><em>Here's an example of a simple heading-sortable grid:</em></p><div class=\"grid\"></div><p><br>The interactions in these two exampels are handled by the core <a href=\"/page/api.client.list\">swell.List</a> object so the router code in the previous section required is minimal, but extensible. in Swell, nearly everything is <strong>bound with events</strong> as opposed to relying on function callbacks globals.</p><p><em>Here's the code that renders both the sortable list and the grid:</em></p><pre><code>  ...list: (search) =&gt;helpers.render 'section[role=main]','examples.list', @app, =&gt;helpers.loader '.simple,.grid'examples.grab (err, models) =&gt;display = if search then @collection.search(search, 'name') else models@list.render 'examples.list_simple', examples: display@grid.render 'examples.list_grid', examples: display...</code></pre><h3 id=\"templatinglists\">Templating Lists</h3><p>These lists in the examples are rendered by passing a context to a template rendered with <a href=\"https://github.com/linkedin/dustjs/wiki/Dust-Tutorial\">DustJS</a>. In our simple first case, that template is <code>client/dust/examples/list_simple.dust</code></p><p>Here's the dust that makes up our simple example with absolutely no frills:</p><pre><code>&lt;ol class=\"swell-list sortable\"&gt;&lcub;#examples&rcub;&lt;li id=\"&lcub;attributes._id&rcub;\"&gt;&lt;span style=\"color:#&lcub;attributes.color&rcub;\"&gt;&lcub;attributes.name&rcub;&lt;/span&gt;&lt;/li&gt;&lcub;:else&rcub;&lt;li class=\"empty\"&gt;There aren't any examples!&lt;/li&gt;&lcub;/examples&rcub;&lt;/ol&gt;</code></pre>  ");}return body_0;})();
(function(){dust.register("examples.list_grid",body_0);function body_0(chk,ctx){return chk.write("<div class=\"search\"><input type=\"text\" name=\"q\" placeholder=\"Search\" /></div><table class=\"grid\"><tr><th></th> <!-- selection placeholder -->").section(ctx.get(["columns"], false),ctx,{"block":body_1},null).write("<th></th></tr>").section(ctx.get(["examples"], false),ctx,{"block":body_3},null).write(" </table>   ");}function body_1(chk,ctx){return chk.write("<th class=\"").helper("eq",ctx,{"block":body_2},{"value":ctx.getPath(false, ["fields",ctx.getPath(true, []),"sortable"])}).helper("prop",ctx,{},{"key":ctx.getPath(true, []),"obj":ctx.get(["fields"], false),"field":"type"}).write("\">").helper("prop",ctx,{},{"key":ctx.getPath(true, []),"obj":ctx.get(["fields"], false),"field":"label"}).write("</th>");}function body_2(chk,ctx){return chk.write("sortable ");}function body_3(chk,ctx){return chk.write("<tr id=\"").reference(ctx.getPath(false, ["attributes","_id"]),ctx,"h").write("\"><td>").helper("checkbox",ctx,{},{"name":"active","bind":"_id","obj":ctx.get(["attributes"], false)}).write("</td>").section(ctx.get(["columns"], false),ctx,{"block":body_4},null).write("<td><button class=\"edit\">Edit</button></td></tr>");}function body_4(chk,ctx){return chk.write("<td data-bind=\"").reference(ctx.getPath(true, []),ctx,"h").write("\">").reference(ctx.getPath(false, ["attributes",ctx.getPath(true, [])]),ctx,"h").write("</td>");}return body_0;})();
(function(){dust.register("examples.list_simple",body_0);function body_0(chk,ctx){return chk.write("<ol class=\"swell-list sortable\">").section(ctx.get(["examples"], false),ctx,{"else":body_1,"block":body_2},null).write("</ol>    ");}function body_1(chk,ctx){return chk.write("<li class=\"empty\">There aren't any examples!</li>");}function body_2(chk,ctx){return chk.write("<li id=\"").reference(ctx.getPath(false, ["attributes","_id"]),ctx,"h").write("\"><span style=\"color:#").reference(ctx.getPath(false, ["attributes","color"]),ctx,"h").write("\">").reference(ctx.getPath(false, ["attributes","name"]),ctx,"h").write("</span></li>");}return body_0;})();
(function(){dust.register("examples.router",body_0);function body_0(chk,ctx){return chk.write("<h1 id=\"swellrouter\">swell.Router</h1><h3 id=\"routing\">Routing</h3><p>Routing is the way in which Backbone provides history to the browser by watching for changes in <code>window.location.hash</code>. </p><p>For more information check out <a href=\"http://backbonejs.org/#Router\">BackboneJS's Router</a> documentation. The single router servicing this app example is <code>client/routers/examples.coffee</code>.</p><p><em>Here's a an exerpt of that code:</em></p><pre><code>class Examples extends swell.Routertitle: 'Swell Client Examples'collection: new collections.Examplesroutes:'home' : 'home''router' : 'router''list/search' : 'search''list/search/:query' : 'search''list' : 'list''edit/:id' : 'edit'init: (@app) =&gt;window.examples = @collection = new collections.Examples@list = new swell.List el: '.simple', sortable: truegrid = el: '.grid', sortable: falsecolumns: ['name','color','length','created_on']fields: new models.Example().fields@grid = new swell.List gridhome: =&gt;# no UI events to bind on the intro # so just render the home template helpers.render 'section[role=main]', 'examples.home', @app, true...  </code></pre><h3 id=\"bindingunbinding\">Binding &amp; Unbinding</h3><p><strong>Now is a good time to open your console</strong>. Refresh the page and take note of the info that Swell is logging, partiulary <code>unbinding route:router</code> and <code>binding route:router</code>.  Swell is <strong>automatically undelegating and unbinding all other app routers</strong> and then binding the current in-use router.</p><p>Because of this, <code>bind()</code> and <code>unbind()</code> methods on your router are an ideal place to bind your data to your views. The unbinding of your events and listeners saves valuable memory and allows Bakcbone.View events to share common class names e.g. <br><code>'click .save' : 'save'</code> without misfiring events. </p><p><em>Here's how we are binding our examples app data and views together:</em></p><pre><code>  ...bind: =&gt;# bind the our list sorting@list.on 'sorted', @collection.sorted# when the collection gets updates re-render the simple list# but, call update() on the grid in case it is user sortedexamples.on 'updated', (res) =&gt;@list.render 'examples.list_simple', examples: examples.models@grid.updateunbind: =&gt;@list.off 'sorted'examples.off 'updated'...</code></pre><p>Lastly, in order for that magic to happen we need to <strong>initialize our router in the main application object</strong>. </p><p><em>Here's an example main Application object:</em></p><pre><code>class Application extends Backbone.Routerinitialize: -&gt; # initialize core helpers and synchrowindow.helpers = @helpers = new views.Helperswindow.synchro = @synchro = new swell.Synchro 'example-app'# initialize application routers@examples = new routers.Examples @# start the partyBackbone.history.start()# return the app instanceconsole.info '[swell] ' + moment().format('HH:mm:ss') + ' app instantiated as window.app 'return @...</code></pre><p>Constructing your routers <strong>using @ (this) as the first argument</strong> tells the router to register itself with the app. Any additional arguments you pass can be recieved by your implementaitons <code>init()</code> method.</p><p>Got all that? Let's check out <a href=\"#list\">swell.List</a></p>");}return body_0;})();
(function(){dust.register("reports.chart",body_0);function body_0(chk,ctx){return chk.write("<div class=\"chart\"><h2>").reference(ctx.get(["name"], false),ctx,"h").write("</h2><canvas id=\"chart\" width=\"1000\" height=\"500\"></canvas></div>");}return body_0;})();
