
(function(){dust.register("examples.form",body_0);function body_0(chk,ctx){return chk.write("<h1 id=\"swellformexample\">swell.Form example</h1>").write("\n\n").write("<p>The main purpose of forms is to allow the manipulation of model properties. Validation can be turned on and off for realtime responses to changed inputs. </p>").write("\n\n").write("<p>There are several default <a href=\"/page/api.client.form#events\">events</a> which <a href=\"/page/api.client.form\">swell.Form</a> will broadcast when lists are interacted with.</p>");}return body_0;})();
(function(){dust.register("examples.home",body_0);function body_0(chk,ctx){return chk.write("<h1 id=\"examples\">Examples</h1>").write("\n\n").write("<p>This is a simple, one-collection, single page app with showing some built-in client functionality and code examples.  </p>").write("\n\n").write("<p>This text is rendered by a method defined and called via <code>home</code> (#home) route in <code>client/routers/examples.coffee</code>. Notice how the hashtag changes while browing these pages. </p>").write("\n\n").write("<p>The dust template markdown is contained in <code>client/dust/examples/home.dust</code>. </p>").write("\n\n").write("<p>Ready? Let's get started with <a href=\"#router\">swell.Router</a></p>");}return body_0;})();
(function(){dust.register("examples.list",body_0);function body_0(chk,ctx){return chk.write("<h1 id=\"swelllistexamples\">swell.List examples</h1>").write("\n\n").write("<p>There aren't too many apps out there these days that don't have lists in one form or another. The core list object faciliates simple <strong>click handling, drag 'n' drop reordering and sortable grid headings</strong>.</p>").write("\n\n").write("<p>There are several default <a href=\"/page/api.client.list#events\">events</a> which <a href=\"/page/api.client.list\">swell.List</a> will broadcast when lists are interacted with.</p>").write("\n\n").write("<h3 id=\"examples\">Examples</h3>").write("\n\n").write("<p><em>Here's a simple drag and drop list example of our object names and colors:</em></p>").write("\n\n").write("<div class=\"simple\"></div>").write("\n\n").write("<p><br></p>").write("\n\n").write("<p><em>Here's an example of a simple heading-sortable grid:</em></p>").write("\n\n").write("<div class=\"grid\"></div>").write("\n\n").write("<p><br>").write("\n").write("The interactions in these two exampels are handled by the core <a href=\"/page/api.client.list\">swell.List</a> object so the router code in the previous section required is minimal but extensible. In Swell, nearly everything is <strong>bound with events</strong> as opposed to relying on function callbacks.</p>").write("\n\n").write("<p><em>Here's the code that renders both the sortable list and the grid:</em></p>").write("\n\n").write("<pre><code>  ...").write("\n  ").write("list: =&gt;").write("\n    ").write("helpers.render 'section[role=main]','examples.list', @app, =&gt;").write("\n      ").write("helpers.loader '.simple,.grid'").write("\n      ").write("examples.grab (err, models) =&gt;").write("\n        ").write("@list.render 'examples.list_simple', examples: models").write("\n        ").write("@grid.render 'examples.list_grid', examples: models").write("\n  ").write("...").write("\n").write("</code></pre>").write("\n\n").write("<h3 id=\"templatinglists\">Templating Lists</h3>").write("\n\n").write("<p>These lists in the examples are rendered by passing a context to a template rendered with <a href=\"https://github.com/linkedin/dustjs/wiki/Dust-Tutorial\">DustJS</a>. In our simple first case, that template is <code>client/dust/examples/list_simple.dust</code></p>").write("\n\n").write("<p>Here's the dust that makes up our simple example with absolutely no frills:</p>").write("\n\n").write("<pre><code>").write("\n  ").write("&lt;ol class=\"swell-list sortable\"&gt;").write("\n    ").write("&lcub;#examples&rcub;").write("\n      ").write("&lt;li id=\"&lcub;attributes._id&rcub;\"&gt;&lt;span style=\"color:#&lcub;attributes.color&rcub;\"&gt;&lcub;attributes.name&rcub;&lt;/span&gt;&lt;/li&gt;").write("\n    ").write("&lcub;:else&rcub;").write("\n      ").write("&lt;li class=\"empty\"&gt;There aren't any examples!&lt;/li&gt;").write("\n    ").write("&lcub;/examples&rcub;").write("\n  ").write("&lt;/ol&gt;").write("\n\n").write("</code></pre>  ").write("\n\n").write("<p>Here's the dust that makes our grid. Note the use of a few custom helpers defined in <a href=\"/page/api.client.helpers\">swell.Helpers</a> :</p>").write("\n\n").write("<pre><code>").write("\n  ").write("&lt;table class=&quot;grid&quot;&gt;").write("\n    ").write("&lt;tr&gt;").write("\n      ").write("&lt;th&gt;Active&lt;/th&gt;").write("\n      ").write("&lcub;#columns&rcub;").write("\n        ").write("&lt;th class=&quot;&lcub;@eq value=fields[.].sortable&rcub;sortable &lcub;/eq&rcub;&lcub;@prop key=. obj=fields field=&quot;type&quot;/&rcub;&quot;&gt;&lcub;@prop key=. obj=fields field=&quot;label&quot;/&rcub;&lt;/th&gt;").write("\n      ").write("&lcub;/columns&rcub;").write("\n    ").write("&lt;/tr&gt;").write("\n    ").write("&lcub;#examples&rcub;").write("\n      ").write("&lt;tr id=&quot;&lcub;attributes._id&rcub;&quot;&gt;").write("\n        ").write("&lt;td&gt;&lcub;@checkbox name=&quot;active&quot; bind=&quot;_id&quot; obj=attributes /&rcub;&lt;/td&gt;").write("\n        ").write("&lcub;#columns&rcub;").write("\n          ").write("&lt;td data-bind=&quot;&lcub;.&rcub;&quot;&gt;&lcub;@format field=fields[.] obj=attributes key=. /&rcub;&lt;/td&gt;").write("\n        ").write("&lcub;/columns&rcub;").write("\n      ").write("&lt;/tr&gt;").write("\n    ").write("&lcub;/examples&rcub; ").write("\n  ").write("&lt;/table&gt;").write("\n").write("</code></pre>  ");}return body_0;})();
(function(){dust.register("examples.list_grid",body_0);function body_0(chk,ctx){return chk.write("<table class=\"grid\">").write("\n  ").write("<tr>").write("\n    ").write("<th>Active</th> <!-- selection placeholder -->").write("\n    ").section(ctx.get(["columns"], false),ctx,{"block":body_1},null).write("\n  ").write("</tr>").write("\n  ").section(ctx.get(["examples"], false),ctx,{"block":body_3},null).write(" ").write("\n").write("</table>   ");}function body_1(chk,ctx){return chk.write("\n      ").write("<th class=\"").helper("eq",ctx,{"block":body_2},{"value":ctx.getPath(false, ["fields",ctx.getPath(true, []),"sortable"])}).helper("prop",ctx,{},{"key":ctx.getPath(true, []),"obj":ctx.get(["fields"], false),"field":"type"}).write("\">").helper("prop",ctx,{},{"key":ctx.getPath(true, []),"obj":ctx.get(["fields"], false),"field":"label"}).write("</th>").write("\n    ");}function body_2(chk,ctx){return chk.write("sortable ");}function body_3(chk,ctx){return chk.write("\n    ").write("<tr id=\"").reference(ctx.getPath(false, ["attributes","_id"]),ctx,"h").write("\">").write("\n      ").write("<td>").helper("checkbox",ctx,{},{"name":"active","bind":"_id","obj":ctx.get(["attributes"], false),"class":"select"}).write("</td>").write("\n      ").section(ctx.get(["columns"], false),ctx,{"block":body_4},null).write("\n    ").write("</tr>").write("\n  ");}function body_4(chk,ctx){return chk.write("\n        ").write("<td data-bind=\"").reference(ctx.getPath(true, []),ctx,"h").write("\">").helper("format",ctx,{},{"field":ctx.getPath(false, ["fields",ctx.getPath(true, [])]),"obj":ctx.get(["attributes"], false),"key":ctx.getPath(true, [])}).write("</td>").write("\n      ");}return body_0;})();
(function(){dust.register("examples.router",body_0);function body_0(chk,ctx){return chk.write("<h1 id=\"swellrouter\">swell.Router</h1>").write("\n\n").write("<p>Routing is the way in which Backbone provides history to the browser by watching for changes in <code>window.location.hash</code>. </p>").write("\n\n").write("<p>For more information check out <a href=\"http://backbonejs.org/#Router\">BackboneJS's Router</a> documentation. The single router servicing this app example is <code>client/routers/examples.coffee</code>.</p>").write("\n\n").write("<p><em>Here's a an exerpt of that code:</em></p>").write("\n\n").write("<pre><code>class Examples extends swell.Router").write("\n\n  ").write("title: 'Swell Client Examples'").write("\n  ").write("collection: new collections.Examples").write("\n  ").write("routes:").write("\n    ").write("'home' : 'home'").write("\n    ").write("'router' : 'router'").write("\n    ").write("'list/search' : 'search'").write("\n    ").write("'list/search/:query' : 'search'").write("\n    ").write("'list' : 'list'").write("\n    ").write("'edit/:id' : 'edit'").write("\n\n  ").write("init: (@app) =&gt;").write("\n    ").write("# scoping the collection directly to the window is optional, but handy ").write("\n    ").write("window.examples = @collection = new collections.Examples").write("\n    ").write("@list = new swell.List el: '.simple', sortable: true").write("\n    ").write("grid = ").write("\n      ").write("el: '.grid', sortable: false").write("\n      ").write("columns: ['name','color','length','created_on']").write("\n      ").write("fields: new models.Example().fields").write("\n    ").write("@grid = new swell.List grid").write("\n\n  ").write("home: =&gt;").write("\n    ").write("# no UI events to bind on the intro ").write("\n    ").write("# so just render the home template ").write("\n    ").write("helpers.render 'section[role=main]', 'examples.home', @app, true").write("\n\n  ").write("...  ").write("\n").write("</code></pre>").write("\n\n").write("<h3 id=\"bindingunbinding\">Binding &amp; Unbinding</h3>").write("\n\n").write("<p><strong>Now is a good time to open your console</strong>. Refresh the page and take note of the info that Swell is logging, partiulary <code>unbinding route:router</code> and <code>binding route:router</code>.  Swell is <strong>automatically undelegating and unbinding all other app routers</strong> and then binding the current in-use router. The automatic unbinding of your events and listeners saves valuable memory and allows Bakcbone.View events to share common class names e.g. <br><code>'click .save' : 'save'</code> without misfiring events.</p>").write("\n\n").write("<p>The <code>bind()</code> and <code>unbind()</code> methods are also a convenient place to bind data events to your views: </p>").write("\n\n").write("<p><em>Here's how we are binding our examples app data and views together:</em></p>").write("\n\n").write("<pre><code>  ...").write("\n  ").write("bind: =&gt;").write("\n\n    ").write("# bind the our list sorting").write("\n    ").write("@list.on 'sorted', @collection.sorted").write("\n\n    ").write("# when the collection gets updates re-render the simple list").write("\n    ").write("# but, call update() on the grid in case it is user sorted").write("\n    ").write("examples.on 'updated', (res) =&gt;").write("\n      ").write("@list.render 'examples.list_simple', examples: examples.models").write("\n      ").write("@grid.update()").write("\n\n\n  ").write("unbind: =&gt;").write("\n    ").write("@list.off 'sorted'").write("\n    ").write("examples.off 'updated'").write("\n  ").write("...").write("\n").write("</code></pre>").write("\n\n").write("<p>Lastly, in order for that magic to happen we need to <strong>initialize our router in the main application object</strong>. </p>").write("\n\n").write("<p><em>Here's an example main Application object:</em></p>").write("\n\n").write("<pre><code>class Application extends Backbone.Router").write("\n\n  ").write("initialize: -&gt; ").write("\n\n    ").write("# initialize core helpers and synchro").write("\n    ").write("window.helpers = @helpers = new views.Helpers").write("\n    ").write("window.synchro = @synchro = new swell.Synchro 'example-app'").write("\n\n    ").write("# initialize application routers").write("\n    ").write("@examples = new routers.Examples @").write("\n\n    ").write("# start the party").write("\n    ").write("Backbone.history.start()").write("\n\n    ").write("# return the app instance").write("\n    ").write("console.info '[swell] ' + moment().format('HH:mm:ss') + ' app instantiated as window.app '").write("\n    ").write("return @").write("\n\n  ").write("...").write("\n").write("</code></pre>").write("\n\n").write("<p>Constructing your routers <strong>using @ (this) as the first argument</strong> tells the router to register itself with the app. Any additional arguments you pass can be recieved by your implementaitons <code>init()</code> method.</p>").write("\n\n").write("<p>Got all that? Let's check out <a href=\"#list\">swell.List</a></p>");}return body_0;})();
(function(){dust.register("examples.list_simple",body_0);function body_0(chk,ctx){return chk.write("<ol class=\"swell-list sortable\">").write("\n  ").section(ctx.get(["examples"], false),ctx,{"else":body_1,"block":body_2},null).write("\n").write("</ol>    ");}function body_1(chk,ctx){return chk.write("\n    ").write("<li class=\"empty\">There aren't any examples!</li>").write("\n  ");}function body_2(chk,ctx){return chk.write("\n    ").write("<li id=\"").reference(ctx.getPath(false, ["attributes","_id"]),ctx,"h").write("\"><span style=\"color:#").reference(ctx.getPath(false, ["attributes","color"]),ctx,"h").write("\">").reference(ctx.getPath(false, ["attributes","name"]),ctx,"h").write("</span></li>").write("\n  ");}return body_0;})();
