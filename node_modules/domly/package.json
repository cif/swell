{
  "name": "domly",
  "version": "0.0.6",
  "description": "A template system that generates DOM",
  "main": "index.js",
  "engines": {
    "node": ">=0.10"
  },
  "scripts": {
    "test": "mocha"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/lazd/domly.git"
  },
  "author": {
    "name": "Larry Davis",
    "email": "lazdnet@gmail.com"
  },
  "license": "MIT",
  "dependencies": {
    "cheerio": "^0.17.0",
    "jison": "^0.4.13"
  },
  "devDependencies": {
    "jsdom": "^0.11.1",
    "mocha": "^1.20.1",
    "chai": "^1.9.1",
    "sinon": "^1.10.3",
    "grunt": "^0.4.5",
    "grunt-karma": "^0.8.3",
    "grunt-simple-mocha": "^0.4.0",
    "grunt-contrib-watch": "^0.6.1",
    "grunt-contrib-uglify": "^0.5.0",
    "grunt-contrib-clean": "^0.5.0",
    "grunt-contrib-jshint": "^0.10.0",
    "grunt-contrib-handlebars": "^0.8.0",
    "grunt-contrib-jst": "^0.6.0",
    "karma": "^0.12.17",
    "karma-chrome-launcher": "^0.1.4",
    "karma-firefox-launcher": "^0.1.3",
    "karma-ios-launcher": "0.0.3",
    "karma-safari-launcher": "^0.1.1",
    "karma-benchmark": "^0.4.0",
    "karma-benchmark-reporter": "^0.1.1",
    "karma-html2js-preprocessor": "^0.1.0",
    "handlebars": "^1.3.0",
    "dot": "^1.0.2"
  },
  "readme": "# DOMly [![NPM version][npm-image]][npm-url] [![Build status][travis-image]][travis]\n> The fast template system that creates and clones DOM nodes\n<img src=\"http://i.imgur.com/kWjdMgE.png\" align=\"right\" alt=\"DOMly logo\">\n\nDOMly uses `cloneNode` and `createElement` to render templates in the browser up to **7 times faster** than [doT] and [Handlebars].\n\nDOMly is named after [Dolly the sheep][Dolly], the first mammal to be cloned.\n\n\n## Example\n\nDOMly's syntax is simply HTML with a few special tags and attribute prefixes thrown in and Mustache-like syntax for variable substitution / method invocation.\n\n```html\n<div>\n  <h1>Category: {{data.category}}</h1>\n    <if data.items.length>\n      <ul>\n        <foreach data.items>\n          <li>\n            <h2>{{parent.category}}: {{data.name}}</h2>\n            <h3 if-data.sale='class=\"sale\"'>{{data.rice}}</h3>\n            <h3>{{formatCount(data.stockCount)}} in stock</h3>\n            <button unless-data.stockCount='disabled=\"disabled\"'>Buy now</button>\n          </li>\n        </foreach>\n      </ul>\n    <else>\n      <p>This category is empty.</p>\n    </if>\n</div>\n```\n\nCalling a compiled template returns the the root [Node] or [DocumentFragment], ready to be added to the DOM:\n\n```js\nvar div = template({\n  category: 'Main Courses',\n  items: [\n    {\n      name: 'Spicy Steak Tacos',\n      sale: true,\n      price: '$5.00',\n      stockCount: 100\n    }\n  ]\n});\n\n// Add the node to the DOM\ndocument.body.appendChild(div);\n```\n\n\n## Available variables\n\n### `data`\n\n`data` refers to the current data context as passed to the template. If within a `<foreach>` or `<forin>` loop, `data` refers to the current item.\n\n### `parent`\n\nWhen within a `<foreach>` or `<forin>` loop, `parent` refers to the data context outside of the loop. This can be chained, resulting in `parent.parent` referring to the data context outside of two nested loops.\n\n### `this`\n\n`this` refers to the value of `this` when executing the template function.\n\nThe initial value of `this` when executing a template is whatever is to the left of the dot:\n\n```\nvar obj = {\n  template: template\n};\n\n// this is obj\nobj.template();\n```\n\nYou can change the value of `this` when executing template function by using [`Function.prototype.call`](Function.prototype.call) or [`Function.prototype.bind`](Function.prototype.bind):\n\n```js\nvar obj = {\n  method: function() {\n    return 'Available as this.method()';\n  },\n  property: 'Available as this.property'\n};\n\nvar templateData = {\n  property: 'Available as this.data'\n};\n\n// Render the template with obj as this and templateData as data\nvar fragment = template.call(obj, data);\n```\n\n\n### `someGlobalVariable`\n\nAll global variables and functions are available within templates.\n\nAs properties of the data context and `this` object must be preceded by `data` and `this` respectively, there is no possibility of accidentally using a global variable.\n\n\n### `someIterator`\n\nAn iterator variable, as declared when using `<foreach>` or `<forin>` with a named iterator.\n\nIterators supersede global variables, so you will not be able to access any globals with the same name as an iterator used anywhere in the template.\n\n### Statements\n\nStatements take the same form as JavaScript statements, except spaces are not allowed.\n\nNote: Expressions are not currently supported within statements. As such, statements cannot contain `&&`, `||`, `+`, etc.\n\n\n### `variable`\n\nVariables can be used as the return value of a statement.\n\n* `data` - Substitute the current data context directly\n* `data.myProperty` - Substitute a property of the current data context\n* `this.myProperty` - Substitute with a property of this\n* `myGlobalVariable` - Substitute a global variable\n* `myGlobalObject.myProperty` - Substitute a property of a globally accessible object\n\n\n### `method()`\n\nMethods can be invoked as part of a statement.\n\n* `data.myMethod()` - Invoke a method of the current data context\n* `parent.myMethod()` - Invoke a method of the parent data context\n* `this.myMethod()` - Invoke a method on this\n* `myGlobalFunction()` - Invoke a globally accessible function\n* `myGlobalObject.myMethod()` - Invoke a method of a globally accessible object\n\nInvoked methods can be passed any arbitrary arguments. For instance:\n\n```\nmyMethod(globalFunc(data.dataProp),parent.parentProp,this.thisProp,globalVariable,globalObject.prop)\n```\n\nThe above statement would invoke `myMethod` with the following:\n\n* The return value of the global function `globalFunc` when passed the current data context's `myDateProp` property\n* The value of the parent data context's `myParentProp` property\n* The value of `this`'s `myScopeProp` property\n* The value of the global variable `myGlobalVariable`\n* The value of the `myProp` property of the globally accessible object, `myGlobalObject`\n\n\n## Substitutions\n\n### `{{statement}}`\n\nSubstitute the return value of `statement` into the DOM as text.\n\nSubstitutions can be made in attribute values or text content:\n\n```html\n<button class=\"{{data.className}}\">{{data.label}}</button>\n```\n\nSubstitutions are always escaped. **It is impossible to inject HTML.**\n\n\n## Syntax\n\n\n### `<if statement>`\n\nInclude the contained elements if `statement` is truthy.\n\n#### If the value of a data context property is truthy\n\nIn this example, we simply test the current data context's `enabled` property for truthiness, adding the `<p>` to the DOM if it's truthy.\n\n```html\n<if data.enabled>\n  <p>{{data.name}} is enabled!</p>\n</if>\n```\n\n#### If the return value of a method is truthy\n\nIn this example, the method `passesTest` is a method of `this`. We'll pass the current data context to it, and, if `passesTest` returns a truthy value, we'll add the `<p>` to the DOM.\n\n```html\n<if this.passesTest(data)>\n  <p>{{data.name}} passes the test!</p>\n</if>\n```\n\n\n### `<unless statement>`\n\nThe opposite of `<if statement>`.\n\n\n### `<else>`\n\nUsed with `<if>` and `<unless>`, evaluated if the statement is falsey.\n\n```html\n<if data.enabled>\n  <p>{{data.name}} is enabled!</p>\n<else>\n  <p>{{data.name}} is disabled.</p>\n</if>\n```\n\n\n### `<foreach statement[,iterator]>`\n\nIterate over the items the of the array returned by `statement`. The item is available as `data`.\n\nIf `iterator` is provided, the index of the current item will be available as `{{iterator}}` for substitution and `iterator` for method invocation.\n\n#### Data\n```json\n{\n  \"tags\": [\"hot\", \"fresh\", \"new\"]\n}\n```\n\n#### Template\n```html\n<ul>\n  <foreach data.tags,tagNumber>\n    <li>{{tagNumber}}. {{data}}</li>\n  </foreach>\n</ul>\n```\n\n#### Output\n```html\n<ul>\n  <li>0. hot</li>\n  <li>1. fresh</li>\n  <li>2. new</li>\n</ul>\n```\n\n\n### `<forin statement[,prop]>`\n\nIterate over the properties of `object`. The value is available as `data`.\n\nIf `prop` is provided, the property name will be available as `{{prop}}` for substitution and `prop` for method invocation.\n\n\n#### Data\n```json\n{\n  \"stats\": {\n    \"Spice level\": \"hot\",\n    \"Vegetarian\": \"No\",\n    \"Rating\": \"5\"\n  }\n}\n```\n\n\n#### Template\n```html\n<ul>\n  <forin data.stats,stat>\n    <li>{{stat}}: {{data}}</li>\n  </forin>\n</ul>\n```\n\n\n#### Output\n```html\n<ul>\n  <li>Spice level: Hot</li>\n  <li>Vegetarian: No</li>\n  <li>Rating: 5</li>\n</ul>\n```\n\n\n### `<div if-statement='attr=\"value\"'>`\n\nConditionally sets the `attr` attribute to `value` if the return value of `statement` is truthy.\n\nUse space to separate multiple attributes.\n\n```html\n<button if-data.disabled='disabled=\"disabled\" class=\"disabled\"'>Buy</button>\n```\n\nAttributes can contain substitutions as well:\n\n```html\n<button if-data.customAttr='{{customAttr.name}}={{customAttr.value}}'>Buy</button>\n```\n\n\n### `<div unless-statement='attr=\"value\"'>`\n\nThe opposite of `<div if-statement='attr=\"value\"'>`.\n\n\n### `<partial statement><partial>`\n\nInsert the returned [DocumentFragment] or [Node] into the DOM.\n\nIf no arguments are passed, the current data context will be passed.\n\n\n### `<helper statement>{{statement}} text</helper>`\n\nInsert the returned string as text content.\n\nIf `statement` is a function call, the text content inside of the `<helper>` tag will be evaluated and passed as the last argument.\n\n\n### `<js>`\n\nEvaluates the content in place. `data` will be set to the current data object and can be mutated or re-assigned.\n\n```html\n<js>\nvar i = 10;\nwhile (i-- > 0) {\n  data.count = i;\n</js>\n  <span>{{data.count}}</span>\n<js>\n}\n</js>\n```\n\n\n### `handle=\"handleName\"`\n\nIf the `handle` attribute is present on any elements in the template, a reference to the element will be assigned as `this.handleName`.\n\nStatements can also be used within handle names.\n\n#### Template\n\n```html\n<ul handle=\"list\">\n  <foreach data.tags,itemNum>\n    <li handle=\"item_{{itemNum}}\">{{data}}</li>\n  </foreach>\n</ul>\n```\n\n#### Usage\n```js\n// An object we'll use as the value of this\nvar obj = {};\n\n// Data for the template\nvar templateData = {\n  name: 'MainList',\n  tags: [\n    'Tag 1',\n    'Tag 2'\n  ]\n};\n\n// Render the template with obj as this and templateData as data\ntemplate.call(obj, templateData);\n\n// For handle names that start with $, references to the jQuery object are available\nview.item_0.innerHTML = 'A new Tag 1';\nview.item_1.innerHTML = 'A new Tag 2';\n```\n\nIf a handle name begins with `$`, such as `$handle`, a jQuery object will be stored as `$handle` and the Node itself will be stored as `handle`. This is accomplished by passing the node to `$`, so you can use your own `$` function instead of jQuery.\n\n\n## Template precompilation\n\nDOMly parses HTML to generate `createElement` statements, and as such, it only makes sense if precompiled.\n\n**You cannot compile DOMly templates in the browser.** Use [`grunt-domly`][grunt-domly] or [`gulp-domly`][gulp-domly] to precompile your templates.\n\nAlternatively, the `domly` Node module can be used to precompile templates.\n\n### domly.precompile(template[, options])\n\nTakes a template string and returns a string of JavaScript code.\n\n#### template\nType: `String`\n\nThe template to compile.\n\n#### options.stripWhitespace\nType: `Boolean`  \nDefault: `false`\n\nIf `true`, meaningless whitespace will be stripped. This provides a large performance boost as less meaningless `createTextNode` calls are created.\n\n**Warning:** Meaningful whitespace, such as space between inline tags, will be preserved. However, if your CSS gives `display: inline` to block elements, whitespace between those elements will still be stripped.\n\n#### options.debug\nType: `Boolean`  \nDefault: `false`\n\nDump debug data, including the source file, parsed tree, and compiled function body.\n\n#### options.noFrags\nType: `Boolean`  \nDefault: `false`\n\nDon't create templates that immediately cache `DocumentFragment` objects. This is useful for web components where you don't want the `createdCallback` to be executed during template declaration.\n\n#### options.preserveHandleAttr\nType: `Boolean`  \nDefault: `false`\n\nLeave the `handle` attribute intact. By default, the `handle` attribute will not be added to the created elements.\n\n#### options.appendClassNames\nType: `Boolean`  \nDefault: `false`\n\nAppend the contents of the `class` attribute value to the existing `className` property. This is useful when your web component sets its className in `createdCallback`.\n\n#### options.preserveComments\nType: `Boolean`  \nDefault: `false`\n\nLeave comment nodes intact in the rendered template. By default, comment nodes will not be included.\n\n\n### Example\n```js\nvar domly = require('domly');\nvar fs = require('fs');\n\n// Precompile returns a string of JS code\nvar template = domly.precompile('<p>My template is {{data.adjective}}!</p>', {\n  stripWhitespace: true // Strip whitespace for better performance\n});\n\nfs.writeFileSync('template.js', 'var awesomeTemplate = '+template.toString()+';');\n```\n\n#### Usage\n```html\n<script src=\"template.js\"></script>\n<script>\n  document.body.appendChild(awesomeTemplate({ adjective: 'awesome' }));\n</script>\n```\n\n## Running the benchmarks\n\nDOMly comes with a set of benchmarks that use karma-benchmark to test real-world browser performance.\n\n```\nnpm install\nbower install\ngrunt bench\n```\n\n\n## Running the test suite\n\nDOMly is tested with mocha, chai, sinon, and jsdom.\n\n```\nnpm install\ngrunt test\n```\n\n\n## License\n\nDOMly is licensed MIT.\n\n\n[Node]: https://developer.mozilla.org/en-US/docs/Web/API/Node\n[DocumentFragment]: https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment\n[Function.prototype.call]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call\n[Function.prototype.bind]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\n[grunt-domly]: http://github.com/lazd/grunt-domly\n[gulp-domly]: http://github.com/lazd/gulp-domly\n[doT]: http://olado.github.io/doT/index.html\n[Handlebars]: http://handlebarsjs.com/\n\n[Dolly]: http://en.wikipedia.org/wiki/Dolly_(sheep)\n[Logo]: http://www.clker.com/clipart-schaap.html\n\n[coveralls]: https://coveralls.io/r/lazd/DOMly\n[coveralls-image]: https://coveralls.io/repos/lazd/DOMly/badge.png?branch=master\n\n[travis]: http://travis-ci.org/lazd/DOMly\n[travis-image]: https://secure.travis-ci.org/lazd/DOMly.png?branch=master\n\n[npm-url]: https://npmjs.org/package/domly\n[npm-image]: https://badge.fury.io/js/domly.png",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/lazd/domly/issues"
  },
  "homepage": "https://github.com/lazd/domly",
  "_id": "domly@0.0.6",
  "_shasum": "1a72faba7eb669098d7468b0ca897608c39fa2c2",
  "_resolved": "git+https://git@github.com/lazd/domly.git#1a7ea3bfd30928b4eec467a2a679d2abedffe75b",
  "_from": "git+https://git@github.com/lazd/domly.git"
}
